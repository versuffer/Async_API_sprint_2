version: '3.8'

services:
  postgres_db:
    container_name: movies_db
    image: postgres:16.2
    volumes:
      - ./database_dump/movies_database_dump.sql:/docker-entrypoint-initdb.d/movies_database_dump.sql:ro
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
    networks:
      - custom_network
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.7.1
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - custom_network
    ports:
      - "${ELASTIC_PORT}:${ELASTIC_PORT}"
    healthcheck:
       test: curl -s ${ELASTIC_SCHEMA}://${ELASTIC_HOST}:${ELASTIC_PORT} > /dev/null || exit 1
       interval: 3s
       timeout: 2s
       retries: 5

  etl_scheduler:
    container_name: "etl_scheduler"
    image: docker.io/versuffer2024/etl:latest
    restart: always
    environment:
      POSTGRES_HOST: postgres_db
      ELASTIC_HOST: elasticsearch
    networks:
      - custom_network
    depends_on:
      postgres_db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  redis:
    image: redis:7.2.4
    container_name: redis_cache
    restart: always
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  movies_api:
    container_name: movies_api
    build: ..
    restart: always
    env_file:
      - ".env"
    networks:
      - custom_network
    depends_on:
      - redis
      - etl_scheduler

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/movies.conf:/etc/nginx/conf.d/movies.conf
    networks:
      - custom_network
    restart: always
    depends_on:
      - movies_api


volumes:
  postgres_data:

networks:
  custom_network:
    external: false
    driver: bridge
